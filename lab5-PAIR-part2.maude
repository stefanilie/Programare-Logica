fmod PAIR{X :: TRIV,Y :: TRIV } is  
  sort Pair{X,Y} .
  op _,_ : X$Elt Y$Elt -> Pair{X,Y} .
  op first : Pair{X,Y} ->  X$Elt .
  op second : Pair{X,Y} -> Y$Elt .
  var A : X$Elt .
  var B : Y$Elt .
  eq first(A , B) = A .
  eq second(A , B) = B .
endfm
 

view TRIV-to-INT from TRIV to INT is
   sort Elt to Int .
endv
 

fmod PAIR-INT is
  protecting PAIR{TRIV-to-INT , TRIV-to-INT} .
endfm  
 

view PAIR-de-INT from TRIV to PAIR-INT is
   sort Elt to Pair{TRIV-to-INT,TRIV-to-INT} .
endv   


fmod LIST{X :: TRIV} is
 sort List{X} .
 subsort X$Elt < List{X} .
 op nil : -> List{X} .
 op _ _ : List{X} List{X} -> List{X} [assoc id: nil] .
endfm
 
 

fmod LIST-PAIR-INT is
  protecting LIST{TRIV-to-INT} .
  protecting LIST{PAIR-de-INT} . 
  op @first : List{PAIR-de-INT} -> List{TRIV-to-INT} .
  op @second : List{PAIR-de-INT} -> List{TRIV-to-INT} .
  var L : List{PAIR-de-INT} .
  var E : Pair{TRIV-to-INT,TRIV-to-INT} .
  eq @first(E L) = first(E) @first(L) .
  eq @first(nil)= nil .
  eq @second(E L) = second(E) @second(L) .
  eq @second(nil) = nil .
endfm

*******perechi de int si string

view TRIV-to-STRING from TRIV to STRING is
   sort Elt to String .
endv


fmod PAIR-de-INT-si-STRING is
  protecting PAIR{TRIV-to-INT,TRIV-to-STRING} .
endfm


view TRIV-to-PAIR-de-INT-si-STRING from TRIV to PAIR-de-INT-si-STRING is
  sort Elt to Pair{TRIV-to-INT,TRIV-to-STRING} .
endv 


fmod LIST-PAIR-INT-STRING is
  protecting LIST{TRIV-to-PAIR-de-INT-si-STRING} .
  protecting LIST{TRIV-to-INT } .
  protecting LIST{TRIV-to-STRING} .
  
  op @first : List{TRIV-to-PAIR-de-INT-si-STRING } -> List{TRIV-to-INT} .
  op @second : List{TRIV-to-PAIR-de-INT-si-STRING } -> List{TRIV-to-STRING} .
  
  
  var L : List{TRIV-to-PAIR-de-INT-si-STRING} .
  var E : Pair{TRIV-to-INT,TRIV-to-STRING} .
  
  eq @first(E L) = first(E) @first(L) .
  eq @first(nil)= nil .
  
  eq @second(E L) = second(E) @second(L) .
  eq @second(nil) = nil .
endfm
  














  
  
  
 
 
 
 
  
  
  