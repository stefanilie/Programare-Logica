fmod MYNAT is

	sorts Zero NzNat Nat .
	subsort Zero NzNat < Nat .
	op 0 : -> Zero .
	op s_ : Nat -> NzNat .
	op p_ : Nat -> Nat .
	op _+_ : Nat Nat -> Nat [assoc comm prec 33] .
	op _*_ : Nat Nat -> Nat [assoc comm prec 31] .
	op _-_ : Nat Nat -> Nat .
	op _<_ : Nat Nat -> Bool .
	op _>_ : Nat Nat -> Bool .
	op _>=_ : Nat Nat -> Bool .
	op _<=_ : Nat Nat -> Bool .
	op max(_,_) : Nat Nat -> Nat .
	op min(_,_) : Nat Nat -> Nat .
	op par_ : Nat -> Bool.
	op impar_ : Nat -> Bool.
	op cmmdc(_,_) : Nat Nat -> Nat .
	vars N M : Nat .
	var F : NzNat .

	eq s(p(N)) = N .
	eq p(s(N)) = N .

	eq 0 + M = M .
	eq s(N) + M = s(N + M) .
	eq p(N) + M = p(N + M) .

	eq 0 * M = 0 .
	eq s(N) * M = (N * M) + M .

	eq N - 0 = N .
	eq M - s(N) = p(M - N) .
	eq M - p(N) = s(M - N) .


	eq (0 < F) = true .
	eq (N < 0) = false .
	eq s(N) <  s(M) = N < M .

	eq (0 > F) = false .
	eq (N > 0) = true.
	eq s(N) >  s(M) = N > M .

	eq (0 <= F) = true .
	eq (N <= 0) = false .
	eq s(N) <=  s(M) = N <= M .


	eq (0 >= F) = false .
	eq (N >= 0) = true.
	eq s(N) >=  s(M) = N >= M .

	eq max(F,0) = F .
	ceq max(M,N) = M if ( N < M ) or ( M == N ) .

	eq min(F,0) = 0 .
	ceq min(M,N) = N if ( N < M ) or ( M == N ) .

	eq par(0) = true .
	eq par(s(0)) = false .
	eq par(s(s(N))) = par (N) .  

	eq impar(0) = false .
	eq impar(s(0)) = true .
	eq impar(s(s(N))) = impar (N) .  



endfm
